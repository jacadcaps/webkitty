diff --git a/resources/benchmark-report.mjs b/resources/benchmark-report.mjs
index 4a71c5a..b85d066 100644
--- a/resources/benchmark-report.mjs
+++ b/resources/benchmark-report.mjs
@@ -1,5 +1,56 @@
 // This file can be customized to report results as needed.
 
+window.onload = function () {
+    const originalDidFinishLastIteration = benchmarkClient.didFinishLastIteration;
+    benchmarkClient.didFinishLastIteration = function (...args) {
+        originalDidFinishLastIteration.apply(this, args);
+
+        const scores = [];
+        const resultsSuites = {};
+        const results = {'Speedometer-3': {
+            'metrics': {
+                'Score': {'current': [scores]},
+                'Time': ['Total', 'Geometric']},
+                'tests': resultsSuites}};
+
+        for (const measuredValues of this._measuredValuesList) {
+            scores.push(measuredValues.score);
+            for (const suiteName in measuredValues.tests) {
+                const measuredTests = measuredValues.tests[suiteName].tests;
+                if (!(suiteName in resultsSuites))
+                    resultsSuites[suiteName] = {'metrics': {'Time': ['Total']}, 'tests': {}};
+                const resultsTests = resultsSuites[suiteName].tests;
+                for (const testName in measuredTests) {
+                    const measuredSubtests = measuredTests[testName].tests;
+                    if (!(testName in resultsTests))
+                        resultsTests[testName] = {'metrics': {'Time': ['Total']}, 'tests': {}};
+                    const resultsSubtests = resultsTests[testName].tests;
+                    for (const subtestName in measuredSubtests) {
+                        if (!(subtestName in resultsSubtests))
+                            resultsSubtests[subtestName] = {'metrics': {'Time': {'current': [[]]}}};
+                        resultsSubtests[subtestName].metrics.Time.current[0].push(measuredSubtests[subtestName]);
+                    }
+                }
+            }
+        }
+
+        const xhr = new XMLHttpRequest();
+        xhr.open("POST", "/report");
+
+        xhr.setRequestHeader("Content-type", "application/json");
+        xhr.onreadystatechange = function() {
+            if (xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200) {
+                const closeRequest = new XMLHttpRequest();
+                closeRequest.open("GET", "/shutdown");
+                closeRequest.send();
+            }
+        }
+        console.log(results);
+        xhr.send(JSON.stringify(results));
+    }
+    document.querySelector(".start-tests-button").click();
+};
+
 (function () {
     if (!window.testRunner && location.search !== "?webkit" && location.hash !== "#webkit")
         return;
