diff -ruN ffmpeg-4.4_orig/configure ffmpeg-4.4_new/configure
--- ffmpeg-4.4_orig/configure	2021-04-08 23:28:39.000000000 +0200
+++ ffmpeg-4.4_new/configure	2022-03-04 20:58:25.406802596 +0100
@@ -5269,7 +5269,7 @@
 # some compilers silently accept -std=c11, so we also need to check that the
 # version macro is defined properly
 test_cflags_cc -std=c11 ctype.h "__STDC_VERSION__ >= 201112L" &&
-    add_cflags -std=c11 ||
+    add_cflags -std=gnu11 ||
     check_cflags -std=c99
 
 check_cppflags -D_FILE_OFFSET_BITS=64
diff -ruN ffmpeg-4.4_orig/libavcodec/decode.c ffmpeg-4.4_new/libavcodec/decode.c
--- ffmpeg-4.4_orig/libavcodec/decode.c	2021-04-08 23:28:39.000000000 +0200
+++ ffmpeg-4.4_new/libavcodec/decode.c	2022-03-04 20:58:25.406802596 +0100
@@ -510,7 +510,9 @@
     }
 
     if (got_frame)
-        av_assert0(frame->buf[0]);
+	if (!frame->buf[0])
+		return AVERROR(EINVAL);
+//        av_assert0(frame->buf[0]);
 
     return ret < 0 ? ret : 0;
 }
@@ -536,7 +538,9 @@
     AVCodecInternal *avci = avctx->internal;
     int ret;
 
-    av_assert0(!frame->buf[0]);
+    if (frame->buf[0])
+	return AVERROR(EINVAL);
+//    av_assert0(!frame->buf[0]);
 
     if (avctx->codec->receive_frame) {
         ret = avctx->codec->receive_frame(avctx, frame);
diff -ruN ffmpeg-4.4_orig/libavcodec/error_resilience.c ffmpeg-4.4_new/libavcodec/error_resilience.c
--- ffmpeg-4.4_orig/libavcodec/error_resilience.c	2020-07-09 11:17:46.000000000 +0200
+++ ffmpeg-4.4_new/libavcodec/error_resilience.c	2022-03-04 20:58:25.406802596 +0100
@@ -622,7 +622,7 @@
 
                 best_pred = 0;
                 best_score = 256 * 256 * 256 * 64;
-                for (j = 0; j < pred_count; j++) {
+                for (j = 0; j < pred_count && s->cur_pic.f; j++) {
                     int *linesize = s->cur_pic.f->linesize;
                     int score = 0;
                     uint8_t *src = s->cur_pic.f->data[0] +
diff -ruN ffmpeg-4.4_orig/libavcodec/h264_slice.c ffmpeg-4.4_new/libavcodec/h264_slice.c
--- ffmpeg-4.4_orig/libavcodec/h264_slice.c	2021-04-08 23:28:39.000000000 +0200
+++ ffmpeg-4.4_new/libavcodec/h264_slice.c	2022-03-04 21:13:48.802232107 +0100
@@ -188,7 +188,9 @@
 {
     int i, ret = 0;
 
-    av_assert0(!pic->f->data[0]);
+    // av_assert0(!pic->f->data[0]);
+    if (!h || !pic || !pic->f || pic->f->data[0])
+        goto fail;
 
     pic->tf.f = pic->f;
     ret = ff_thread_get_buffer(h->avctx, &pic->tf, pic->reference ?
@@ -2599,7 +2601,7 @@
 
     sl->mb_skip_run = -1;
 
-    av_assert0(h->block_offset[15] == (4 * ((scan8[15] - scan8[0]) & 7) << h->pixel_shift) + 4 * sl->linesize * ((scan8[15] - scan8[0]) >> 3));
+    // av_assert0(h->block_offset[15] == (4 * ((scan8[15] - scan8[0]) & 7) << h->pixel_shift) + 4 * sl->linesize * ((scan8[15] - scan8[0]) >> 3));
 
     if (h->postpone_filter)
         sl->deblocking_filter = 0;
@@ -2807,7 +2809,9 @@
     if (h->avctx->hwaccel || context_count < 1)
         return 0;
 
-    av_assert0(context_count && h->slice_ctx[context_count - 1].mb_y < h->mb_height);
+    if (!(context_count && h->slice_ctx[context_count - 1].mb_y < h->mb_height))
+       return 0;
+    // av_assert0(context_count && h->slice_ctx[context_count - 1].mb_y < h->mb_height);
 
     if (context_count == 1) {
 
diff -ruN ffmpeg-4.4_orig/libavutil/mem.c ffmpeg-4.4_new/libavutil/mem.c
--- ffmpeg-4.4_orig/libavutil/mem.c	2020-07-11 12:39:30.000000000 +0200
+++ ffmpeg-4.4_new/libavutil/mem.c	2022-03-04 20:58:25.406802596 +0100
@@ -228,7 +228,7 @@
 void av_freep(void *arg)
 {
     void *val;
-
+    if (!arg) return;
     memcpy(&val, arg, sizeof(val));
     memcpy(arg, &(void *){ NULL }, sizeof(val));
     av_free(val);
diff -ruN ffmpeg-4.4_orig/libavutil/ppc/cpu.c ffmpeg-4.4_new/libavutil/ppc/cpu.c
--- ffmpeg-4.4_orig/libavutil/ppc/cpu.c	2020-07-09 11:17:46.000000000 +0200
+++ ffmpeg-4.4_new/libavutil/ppc/cpu.c	2022-03-04 20:58:25.406802596 +0100
@@ -31,6 +31,11 @@
 #include <sys/param.h>
 #include <sys/sysctl.h>
 #include <machine/cpu.h>
+#elif defined(__MORPHOS__)
+#include <exec/exec.h>
+#include <exec/system.h>
+#include <proto/exec.h>
+int altivec_disabled;
 #elif defined(__AMIGAOS4__)
 #include <exec/exec.h>
 #include <interfaces/exec.h>
@@ -56,6 +61,15 @@
     if (result == VECTORTYPE_ALTIVEC)
         return AV_CPU_FLAG_ALTIVEC;
     return 0;
+#elif defined(__MORPHOS__)
+    ULONG result = 0;
+    if (altivec_disabled ||
+        !NewGetSystemAttrs(&result, sizeof(result), SYSTEMINFOTYPE_PPC_ALTIVEC, TAG_DONE) ||
+        !LIB_MINVER(&SysBase->LibNode, 50, 61))
+    {
+        result = 0;
+    }
+    return result != 0 ? AV_CPU_FLAG_ALTIVEC : 0;
 #elif defined(__APPLE__) || defined(__OpenBSD__)
 #ifdef __OpenBSD__
     int sels[2] = {CTL_MACHDEP, CPU_ALTIVEC};
diff -ruN ffmpeg-4.4_orig/libswscale/ppc/yuv2rgb_altivec.c ffmpeg-4.4_new/libswscale/ppc/yuv2rgb_altivec.c
--- ffmpeg-4.4_orig/libswscale/ppc/yuv2rgb_altivec.c	2021-04-08 23:28:40.000000000 +0200
+++ ffmpeg-4.4_new/libswscale/ppc/yuv2rgb_altivec.c	2022-03-04 20:58:25.406802596 +0100
@@ -89,6 +89,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <inttypes.h>
+#include <assert.h>
 
 #include "config.h"
 #include "libswscale/rgb2rgb.h"
@@ -101,6 +102,7 @@
 #include "yuv2rgb_altivec.h"
 
 #if HAVE_ALTIVEC
+#include <altivec.h>
 
 #undef PROFILE_THE_BEAST
 #undef INC_SCALING
@@ -142,6 +144,7 @@
  *           brgb|rgbr|gbrg|brgb
  *           1001 0010 0100 1001
  *           a67b 89cA BdCD eEFf
+ *
  */
 static const vector unsigned char
     perm_rgb_0 = { 0x00, 0x01, 0x10, 0x02, 0x03, 0x11, 0x04, 0x05,
@@ -316,6 +319,9 @@
     vector signed short R1, G1, B1;                                           \
     vector unsigned char R, G, B;                                             \
                                                                               \
+    const vector unsigned char *y1ivP, *y2ivP, *uivP, *vivP;                  \
+    vector unsigned char align_perm;                                          \
+                                                                              \
     vector signed short lCY       = c->CY;                                    \
     vector signed short lOY       = c->OY;                                    \
     vector signed short lCRV      = c->CRV;                                   \
@@ -346,13 +352,26 @@
         vec_dstst(oute, (0x02000002 | (((w * 3 + 32) / 32) << 16)), 1);       \
                                                                               \
         for (j = 0; j < w / 16; j++) {                                        \
-            y0 = vec_xl(0, y1i);                                              \
+            y1ivP = (const vector unsigned char *) y1i;                       \
+            y2ivP = (const vector unsigned char *) y2i;                       \
+            uivP  = (const vector unsigned char *) ui;                        \
+            vivP  = (const vector unsigned char *) vi;                        \
+                                                                              \
+            align_perm = vec_lvsl(0, y1i);                                    \
+            y0 = (vector unsigned char)                                       \
+                     vec_perm(y1ivP[0], y1ivP[1], align_perm);                \
+                                                                              \
+            align_perm = vec_lvsl(0, y2i);                                    \
+            y1 = (vector unsigned char)                                       \
+                     vec_perm(y2ivP[0], y2ivP[1], align_perm);                \
                                                                               \
-            y1 = vec_xl(0, y2i);                                              \
-                                                                              \
-            u = (vector signed char) vec_xl(0, ui);                           \
+            align_perm = vec_lvsl(0, ui);                                     \
+            u = (vector signed char)                                          \
+                    vec_perm(uivP[0], uivP[1], align_perm);                   \
                                                                               \
-            v = (vector signed char) vec_xl(0, vi);                           \
+            align_perm = vec_lvsl(0, vi);                                     \
+            v = (vector signed char)                                          \
+                    vec_perm(vivP[0], vivP[1], align_perm);                   \
                                                                               \
             u = (vector signed char)                                          \
                     vec_sub(u,                                                \
@@ -595,7 +614,7 @@
     return NULL;
 }
 
-av_cold void ff_yuv2rgb_init_tables_ppc(SwsContext *c,
+static av_cold void __attribute__ ((noinline)) ff_yuv2rgb_init_tables_altivec(SwsContext *c,
                                         const int inv_table[4],
                                         int brightness,
                                         int contrast,
@@ -628,6 +647,18 @@
 #endif /* HAVE_ALTIVEC */
 }
 
+av_cold void ff_yuv2rgb_init_tables_ppc(SwsContext *c,
+                                        const int inv_table[4],
+                                        int brightness,
+                                        int contrast,
+                                        int saturation)
+{
+#if HAVE_ALTIVEC
+    if (av_get_cpu_flags() & AV_CPU_FLAG_ALTIVEC)
+        ff_yuv2rgb_init_tables_altivec(c, inv_table, brightness, contrast, saturation);
+#endif /* HAVE_ALTIVEC */
+}
+
 #if HAVE_ALTIVEC
 
 static av_always_inline void yuv2packedX_altivec(SwsContext *c,
